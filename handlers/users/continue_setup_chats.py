import json

from aiogram import types
from aiogram.dispatcher import FSMContext

from keyboards.inline import continue_setup_keyboard, return_setup_chats_menu
from loader import dp, db, bot
from states import SetupChatsState


@dp.callback_query_handler(lambda c: c.data == "continue_setup")
async def continue_setup(query: types.CallbackQuery, state: FSMContext):
    await state.reset_state(with_data=False)
    state_data = await state.get_data()

    selected_chats = state_data["selected_chats"]
    account_name = state_data["account_name"]

    if len(selected_chats) == 0:
        await query.answer("–¢—ã –Ω–µ –≤—ã–±—Ä–∞–ª –Ω–∏ –æ–¥–∏–Ω —á–∞—Ç!", show_alert=True)
        return 0

    if len(selected_chats) == 1:
        # COMPLETED –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞
        chat_id = list(selected_chats.keys())[0]
        chat_data = await db.get_one_chat_sql(account_name, chat_id)

        chat_title = chat_data[2]
        time = json.loads(chat_data[3])
        work = chat_data[4]
        text = chat_data[5]

        times = ""

        for i in time:
            times += f"{i}, "

        #print(times)

        times = list(times)

        times[-1] = ""
        times[-2] = "."

        times = "".join(times)

        if work == 0:
            work = "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
        elif work == 1:
            work = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ"

        try:
            await query.message.edit_text(
                f"<b>‚öô –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Ç—ã</b>\n\n<b>–í—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç</b>: {chat_title}\n\n<b>–í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b> {times}\n\n<b>–¢–µ–∫—Å—Ç:</b>\n{text}\n\n<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {work}",
                reply_markup=continue_setup_keyboard)
        except:
            pass
    try:
        await query.message.edit_reply_markup(reply_markup=continue_setup_keyboard)
    except:
        pass


@dp.callback_query_handler(lambda c: c.data == "edit_time")
async def _(query: types.CallbackQuery, state: FSMContext):
    state_data = await state.get_data()

    selected_chats = state_data["selected_chats"]
    selected_chats_names = []

    edited_message_id = query.message.message_id
    await state.update_data(message_id=edited_message_id)

    for chat_id in selected_chats.keys():
        selected_chats_names.append(selected_chats[chat_id])

    text = ""

    for chat_id in selected_chats.keys():
        chat_title = selected_chats[chat_id]
        text += f"\n‚Ä¢ {chat_title}"

    if text == "": text = "—á–∞—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã."

    await SetupChatsState.EDIT_TIME.set()
    await query.message.edit_text(
        f"<b>üïô –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è</b>\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã: {text}\n\n–í–≤–µ–¥–∏ —á–µ—Ä–µ–∑ —ç–Ω—Ç–µ—Ä –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:",
        reply_markup=return_setup_chats_menu)


@dp.message_handler(state=SetupChatsState.EDIT_TIME)
async def _(msg: types.Message, state: FSMContext):
    times = msg.text.split("\n")

    state_data = await state.get_data()

    edited_message_id = state_data["message_id"]
    delete_message_id = msg.message_id

    selected_chats = state_data["selected_chats"]
    await db.update_time_sql(state, times)

    text = ""
    text2 = ""

    # print(selected_chats)

    for chat_id in selected_chats.keys():
        chat_title = selected_chats[chat_id]
        text += f"\n‚Ä¢ {chat_title}"

    if text == "": text = "—á–∞—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã."

    for i in times:
        text2 += f"{i}, "

    text2 = text2[:-2]

    await bot.delete_message(msg.from_user.id, delete_message_id)
    await bot.edit_message_text(chat_id=msg.from_user.id,
                                text=f"<b>üïô –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è</b>\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã: {text}\n\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: {text2}.",
                                message_id=edited_message_id, reply_markup=return_setup_chats_menu)


@dp.callback_query_handler(lambda c: c.data == "edit_text")
async def _(query: types.CallbackQuery, state: FSMContext):
    state_data = await state.get_data()

    selected_chats = state_data["selected_chats"]

    edited_message_id = query.message.message_id
    await state.update_data(message_id=edited_message_id)

    text = ""

    for chat_id in selected_chats.keys():
        chat_title = selected_chats[chat_id]
        text += f"\n‚Ä¢ {chat_title}"

    if text == "": text = "—á–∞—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã."

    await SetupChatsState.EDIT_TEXT.set()
    await query.message.edit_text(
        f"<b>‚úç –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç</b>\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã: {text}\n\n–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=return_setup_chats_menu)


@dp.message_handler(state=SetupChatsState.EDIT_TEXT, content_types=types.ContentTypes.TEXT)
async def _(msg: types.Message, state: FSMContext):
    html_text = msg.html_text

    state_data = await state.get_data()

    edited_message_id = state_data["message_id"]
    delete_message_id = msg.message_id

    selected_chats = state_data["selected_chats"]

    await db.update_text_sql(state, html_text)

    text = ""
    text2 = ""

    for chat_id in selected_chats.keys():
        chat_title = selected_chats[chat_id]
        text += f"\n‚Ä¢ {chat_title}"

    if text == "": text = "—á–∞—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã."

    sch = 0

    await bot.delete_message(msg.from_user.id, delete_message_id)
    await bot.edit_message_text(chat_id=msg.from_user.id,
                                text=f"<b>‚úç –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç</b>\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã: {text}\n\n<b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n{html_text}",
                                message_id=edited_message_id, reply_markup=return_setup_chats_menu)


@dp.callback_query_handler(lambda c: c.data == "add_photo")
async def _(query: types.CallbackQuery, state: FSMContext):
    state_data = await state.get_data()

    selected_chats = state_data["selected_chats"]

    edited_message_id = query.message.message_id
    await state.update_data(message_id=edited_message_id)


    text = ""

    for chat_id in selected_chats.keys():
        chat_title = selected_chats[chat_id]
        text += f"\n‚Ä¢ {chat_title}"

    if text == "": text = "—á–∞—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã."

    await SetupChatsState.ADD_PHOTO.set()
    await query.message.edit_text(
        f"<b>‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ</b>\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã: {text}\n\n–°–∫–∏–Ω—å <b>1 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</b> –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å.",
        reply_markup=return_setup_chats_menu)

@dp.callback_query_handler(lambda c: c.data == "delete_photo")
async def _(query: types.CallbackQuery, state: FSMContext):
    state_data = await state.get_data()

    selected_chats = state_data["selected_chats"]

    await db.delete_photo_sql(state)

    text = ""

    for chat_id in selected_chats.keys():
        chat_title = selected_chats[chat_id]
        text += f"\n‚Ä¢ {chat_title}"

    if text == "": text = "—á–∞—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã."

    await SetupChatsState.ADD_PHOTO.set()
    await query.message.edit_text(
        f"<b>‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ</b>\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã: {text}\n\n–í—Å–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —É–±—Ä–∞–Ω—ã.",
        reply_markup=return_setup_chats_menu)


@dp.message_handler(state=SetupChatsState.ADD_PHOTO, content_types=types.ContentTypes.PHOTO)
async def _(msg: types.Message, state: FSMContext):
    file_info = await bot.get_file(msg.photo[-1].file_id)
    await bot.download_file_by_id(file_info.file_id, f"photos/{file_info.file_unique_id}.jpg")

    state_data = await state.get_data()

    delete_message_id = msg.message_id


    selected_chats = state_data["selected_chats"]
    edited_message_id = state_data["message_id"]


    await db.add_photo_sql(state, file_info.file_unique_id)

    text = ""

    for chat_id in selected_chats.keys():
        chat_title = selected_chats[chat_id]
        text += f"\n‚Ä¢ {chat_title}"

    if text == "": text = "—á–∞—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã."

    await bot.delete_message(msg.from_user.id, delete_message_id)
    await bot.edit_message_text(chat_id=msg.from_user.id,
                                text=f"<b>‚úç –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç</b>\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã: {text}\n\n–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.",
                                message_id=edited_message_id, reply_markup=return_setup_chats_menu)



@dp.callback_query_handler(lambda c: c.data == "mute_chats")
async def _(query: types.CallbackQuery, state: FSMContext):
    await db.mute_chats_sql(state)

    state_data = await state.get_data()
    selected_chats = state_data["selected_chats"]

    text = ""

    for chat_id in selected_chats.keys():
        chat_title = selected_chats[chat_id]
        text += f"\n‚Ä¢ {chat_title}"

    if text == "": text = "—á–∞—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã."

    await query.message.edit_text(
        f"<b>‚ùå –í—ã–∫–ª—é—á–∏—Ç—å —á–∞—Ç—ã</b>\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã: {text}\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ <b>–≤—ã–∫–ª—é—á–µ–Ω—ã</b>.",
        reply_markup=return_setup_chats_menu)


@dp.callback_query_handler(lambda c: c.data == "enable_chats")
async def _(query: types.CallbackQuery, state: FSMContext):
    await db.enable_chats_sql(state)

    state_data = await state.get_data()
    selected_chats = state_data["selected_chats"]

    text = ""

    for chat_id in selected_chats.keys():
        chat_title = selected_chats[chat_id]
        text += f"\n‚Ä¢ {chat_title}"

    if text == "": text = "—á–∞—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã."

    await query.message.edit_text(
        f"<b>‚úÖ –í–∫–ª—é—á–∏—Ç—å —á–∞—Ç—ã</b>\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã: {text}\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ <b>–≤–∫–ª—é—á–µ–Ω—ã</b>.",
        reply_markup=return_setup_chats_menu)


@dp.callback_query_handler(lambda c: c.data == "return_back", state="*")
async def _(query: types.CallbackQuery, state: FSMContext):
    await continue_setup(query, state)
